20. Valid Parentheses
Easy
22.4K
1.5K
Companies
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

---
# @param {String} s
# @return {Boolean}
def is_valid(s)
  # 創建一個陣列來模擬堆疊！
  stack = []

  # 對應左括號到右括號
  mapping = {
    ')' => '(',
    ']' => '[',
    '}' => '{'
  }

  # 先抓右括弧因為右括弧先的話就沒戲唱 是 false
  s.each_char do |char|
    # 如果字元是右括號
    if mapping.has_key?(char)
      # 取出堆疊頂部的元素，如果堆疊是空的，則設為 '#'如果堆疊不為空，則從堆疊中'彈出'頂部元素並將其賦值給 top_element。
      top_element = stack.empty? ? '#' : stack.pop

      # 檢查取出的頂部元素是否與當前的右括號配對，無法配對就是false!
      return false if mapping[char] != top_element

    else
      # 反之如果是左括號先出現，則推入堆疊（會是第一個）
      stack.push(char)
    end
  end

  # 檢查堆疊是否為空，如果是，則所有的括號都是配對的
  return stack.empty?
end

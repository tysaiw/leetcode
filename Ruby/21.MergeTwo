21. Merge Two Sorted Lists
Easy
20.3K
1.9K
Companies
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

---

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end

# @param {ListNode} list1
# @param {ListNode} list2
# @return {ListNode}
def merge_two_lists(list1, list2)
  # 初始化一個假頭節點，它會成為合併後鏈表的頭節點
  dummy_head = ListNode.new(0)
  
  # 當前節點，用於構建新的鏈表
  current = dummy_head
  
  while list1 && list2
    # 比較兩個鏈表的當前節點，選擇較小的節點接到新鏈表上
    if list1.val < list2.val
      current.next = list1
      list1 = list1.next
    else
      current.next = list2
      list2 = list2.next
    end
    
    # 移動當前節點
    current = current.next
  end
  
  # 如果其中一個鏈表還有剩餘節點，則直接接到新鏈表的末尾
  current.next = list1 ? list1 : list2
  
  # 返回合併後的鏈表頭節點
  dummy_head.next
end
